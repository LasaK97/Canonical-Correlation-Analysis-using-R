kable(newphy) %>% kable_styling() %>% scroll_box(height = "200px")
library(kableExtra)
newphy <- result$data
kable(newphy) %>% kable_styling() %>% scroll_box(height = "200px")
result1<-mvn(data = data,multivariateOutlierMethod = "adj",
showOutliers = TRUE, showNewData = TRUE)
mvn(data = data,subset = NULL,mvnTest = "mardia")
mvn(data = newphy,subset = NULL,mvnTest = "mardia")
mvn(data = newphy,subset = NULL,mvnTest = "mardia")
# Check if the object is a dataframe
if (is.data.frame(newphy)) {
print("The object is a dataframe.")
} else {
print("The object is NOT a dataframe.")
}
mvn(data = newphy,subset = NULL,mvnTest = "mardia")
typeof(newphy)
library(kableExtra)
newphy <- result$data
kable(newphy) %>% kable_styling() %>% scroll_box(height = "2000px")
typeof(newphy)
typeof(newphy)
head(newphy)
remove_outliers_iqr <- function(x) {
q1 <- quantile(x, 0.25)
q3 <- quantile(x, 0.75)
iqr <- q3 - q1
lower_bound <- q1 - 1.5 * iqr
upper_bound <- q3 + 1.5 * iqr
x[x >= lower_bound & x <= upper_bound]
}
# Apply the function to each numeric column of the dataframe
numeric_columns <- sapply(data, is.numeric)
data[, numeric_columns] <- lapply(data[, numeric_columns], remove_outliers_iqr)
outliers <- function(x) {
Q1 <- quantile(x, probs=.25)
Q3 <- quantile(x, probs=.75)
iqr = Q3-Q1
upper_limit = Q3 + (iqr*1.5)
lower_limit = Q1 - (iqr*1.5)
x > upper_limit | x < lower_limit
}
remove_outliers <- function(df, cols = names(df)) {
for (col in cols) {
df <- df[!outliers(df[[col]]),]
}
df
}
remove_outliers(data, c("Age","Height", "Weight", "Bodyfat", "Gripforce", "SitandBend", "Situps", "Broadjumps"))
mvn(data = newphy,subset = NULL,mvnTest = "mardia")
mvn(data = data,subset = NULL,mvnTest = "mardia")
result<-mvn(data = data,multivariateOutlierMethod = "adj",
showOutliers = TRUE, showNewData = TRUE)
result<-mvn(data = data,multivariateOutlierMethod = "adj",
showOutliers = TRUE, showNewData = TRUE)
data.new <- remove_outliers(data, c("Age","Height", "Weight", "Bodyfat", "Gripforce", "SitandBend", "Situps", "Broadjumps"))
data.new <- remove_outliers(data, c("Age","Height", "Weight", "Bodyfat", "Gripforce", "SitandBend", "Situps", "Broadjumps"))
result<-mvn(data = data.new,multivariateOutlierMethod = "adj",
showOutliers = TRUE, showNewData = TRUE)
mvn(data = data.new,subset = NULL,mvnTest = "mardia")
remove_outliers_sd <- function(df, cols = names(df)) {
for (col in cols) {
# Standardize the data in the column
col_mean <- mean(df[[col]])
col_std <- sd(df[[col]])
df[[col]] <- (df[[col]] - col_mean) / col_std
# Define the threshold for outlier detection (e.g., z-score > 3 or z-score < -3)
threshold <- 3
# Filter out the rows with z-scores beyond the threshold
df <- df[abs(df[[col]]) <= threshold, ]
# Revert the standardized data back to its original scale (optional)
df[[col]] <- df[[col]] * col_std + col_mean
}
return(df)
}
newdf <- remove_outliers_sd(data)
dim(newdf)
dim(newdf)
dim(data.new)
remove_outliers_sd <- function(df, cols = names(df)) {
for (col in cols) {
# Standardize the data in the column
col_mean <- mean(df[[col]])
col_std <- sd(df[[col]])
df[[col]] <- (df[[col]] - col_mean) / col_std
# Define the threshold for outlier detection (e.g., z-score > 3 or z-score < -3)
threshold <- 2
# Filter out the rows with z-scores beyond the threshold
df <- df[abs(df[[col]]) <= threshold, ]
# Revert the standardized data back to its original scale (optional)
df[[col]] <- df[[col]] * col_std + col_mean
}
return(df)
}
newdf <- remove_outliers_sd(data)
dim(newdf)
mvn(data = newdf,subset = NULL,mvnTest = "mardia")
result<-mvn(data = data,multivariateOutlierMethod = "adj",
showOutliers = TRUE, showNewData = TRUE)
result<-mvn(data = data,multivariateOutlierMethod = "adj",
showOutliers = TRUE, showNewData = TRUE)
result<-mvn(data = newdf,multivariateOutlierMethod = "adj",
showOutliers = TRUE, showNewData = TRUE)
remove_outliers_sd <- function(df, cols = names(df)) {
for (col in cols) {
# Standardize the data in the column
col_mean <- mean(df[[col]])
col_std <- sd(df[[col]])
df[[col]] <- (df[[col]] - col_mean) / col_std
# Define the threshold for outlier detection (e.g., z-score > 3 or z-score < -3)
threshold <- 1.5
# Filter out the rows with z-scores beyond the threshold
df <- df[abs(df[[col]]) <= threshold, ]
# Revert the standardized data back to its original scale (optional)
df[[col]] <- df[[col]] * col_std + col_mean
}
return(df)
}
newdf <- remove_outliers_sd(data)
dim(newdf)
dim(data.new)
mvn(data = newdf,subset = NULL,mvnTest = "mardia")
result<-mvn(data = newdf,multivariateOutlierMethod = "adj",
showOutliers = TRUE, showNewData = TRUE)
remove_outliers_sd <- function(df, cols = names(df)) {
for (col in cols) {
# Standardize the data in the column
col_mean <- mean(df[[col]])
col_std <- sd(df[[col]])
df[[col]] <- (df[[col]] - col_mean) / col_std
# Define the threshold for outlier detection (e.g., z-score > 3 or z-score < -3)
threshold <- 2.5
# Filter out the rows with z-scores beyond the threshold
df <- df[abs(df[[col]]) <= threshold, ]
# Revert the standardized data back to its original scale (optional)
df[[col]] <- df[[col]] * col_std + col_mean
}
return(df)
}
newdf <- remove_outliers_sd(data)
dim(newdf)
mvn(data = newdf,subset = NULL,mvnTest = "mardia")
result<-mvn(data = newdf,multivariateOutlierMethod = "adj",
showOutliers = TRUE, showNewData = TRUE)
#remove outliers using standarization
remove_outliers_sd <- function(df, cols = names(df)) {
for (col in cols) {
col_mean <- mean(df[[col]])
col_std <- sd(df[[col]])
df[[col]] <- (df[[col]] - col_mean) / col_std
threshold <- 2
df <- df[abs(df[[col]]) <= threshold, ]
df[[col]] <- df[[col]] * col_std + col_mean
}
return(df)
}
newdf <- remove_outliers_sd(data)
#remove outliers using standarization
remove_outliers<- function(df, cols = names(df)) {
for (col in cols) {
col_mean <- mean(df[[col]])
col_std <- sd(df[[col]])
df[[col]] <- (df[[col]] - col_mean) / col_std
threshold <- 2
df <- df[abs(df[[col]]) <= threshold, ]
df[[col]] <- df[[col]] * col_std + col_mean
}
return(df)
}
data.std <- remove_outliers(data)
dim(data.std)
head(data.std)
data.new <- remove_outliers(data)
dim(data.new)
mvn(data = data.new,subset = NULL,mvnTest = "mardia")
# mardia test for multivariate normality
mvn(data = data.new,subset = NULL,mvnTest = "hz")
# Anderson-Darling test to check univariate normality
mvn_un <- mvn(data = data.new, univariateTest = "AD" , desc=T)
mvn_un$univariateNormality
#Log transformation
data.log= log1p(data.new)
#Log transformation
data.log= log(data.new)
#Log transformation
data.log= log(data.new)
data.new[data.new <= 0] <- 0.001
#Log transformation
data.log= log(data.new)
mvn_un.log <- mvn(data = data.log, univariateTest = "AD" , desc=T)
mvn_un.log$univariateNormality
head(log)
head(data.log)
# mardia test for multivariate normality
mvn(data = data.log,subset = NULL,mvnTest = "mardia")
# Henze-Zirkler's test for multivariate normality
mvn(data = data.log,subset = NULL,mvnTest = "hz")
library(MASS)
# Box-Cox transformation
data.box <- boxcox(data.new, lambda = seq(-2, 2, by = 0.1))
library(MASS)
formula_data <- as.formula(paste("y ~ 1", collapse = " "))
# Box-Cox transformation
data.box.re <- boxcox(formula_data, data = data.new)
library(MASS)
formula_data <- as.formula(paste("y ~ 1", collapse = " "))
# Box-Cox transformation
data.box.re <- boxcox(formula_data, data = data.new)
# Create a formula with a dummy variable for Box-Cox transformation
formula_data <- as.formula(paste("y ~ x", collapse = " "))
# Create a dummy variable (it doesn't influence the transformation since we use only an intercept)
dummy_variable <- rep(1, length(data.new))
# Perform Box-Cox transformation
box_cox_result <- boxcox(formula_data, data = data.frame(y = data.new, x = dummy_variable))
# Create a formula with a dummy variable for Box-Cox transformation
formula_data <- as.formula(paste("y ~ x", collapse = " "))
# Create a dummy variable (it doesn't influence the transformation since we use only an intercept)
dummy_variable <- rep(8, length(data.new))
# Perform Box-Cox transformation
box_cox_result <- boxcox(formula_data, data = data.frame(y = data.new, x = dummy_variable))
# Create a formula with a dummy variable for Box-Cox transformation
formula_data <- as.formula(paste("y ~ x", collapse = " "))
# Create a dummy variable (it doesn't influence the transformation since we use only an intercept)
dummy_variable <- rep(10543, length(data.new))
# Perform Box-Cox transformation
box_cox_result <- boxcox(formula_data, data = data.frame(y = data.new, x = dummy_variable))
physiology.set.new <- select(data.new, Age, Height, Weight, Bodyfat)
head(data.new)
detach("package:dplyr", unload = TRUE)
library(dplyr)
physiology.set.new <- select(data.new, Age, Height, Weight, Bodyfat)
exercise.set.new <- select(data.new, Gripforce, SitandBend, Situps, Broadjumps)
head(exercise.set.new)
install.packages("CCP")
install.packages("ccaPP")
# canonical correlations
cca.raw <- cancor(physiology.set.new, exercise.set.new)
cca.raw
# normalized canonical correlations
cca<-cancor(scale(newx, scale=T, center=T),scale(newy, scale=T,center=T))
# normalized canonical correlations
cca.scaled<-cancor(scale(physiology.set.new, scale=T, center=T),scale(exercise.set.new, scale=T,center=T))
cca.scaled
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
new_colnames <- c('Reference','Tmax', 'R0','HI','PI', 'TOC')
data <- read_excel("E:/Vihaga/data/data.xlsx", skip = 1,col_names = new_colnames)
head(data)
str(df)
head(df)
library(dplyr)
df = data %>%
select(Tmax, R0, HI  )
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
new_colnames <- c('Reference','Tmax', 'R0','HI','PI', 'TOC')
data <- read_excel("E:/Vihaga/data/data.xlsx", skip = 1,col_names = new_colnames)
head(data)
str(df)
library(dplyr)
df = data %>%
select(Tmax, R0, HI  )
head(df)
dim(df)
df$HI[!grepl("^\\d+$", df$HI)] <- NA
library(mice)
md.pattern(df)
miss.count <- function(x){
sort(colSums(is.na(x)), decreasing = TRUE )
}
miss.count(df)
df.cleaned <- na.omit(df)
miss.count(df.cleaned)
md.pattern(df.cleaned)
dim(df.cleaned)
df.cleaned$HI <- as.numeric(df.cleaned$HI)
HI_na_count <- sum(is.na(df.cleaned$HI))
HI_na_count
library(ggplot2)
#Tmax vs HI
ggplot(df.cleaned, aes(x=Tmax, y = HI))+
geom_point() +
labs(title = "Scatter Plot of HI (mg HC/g TOC) vs Tmax", x = "Tmax(Celsius)", y = "HI (mg HC/g TOC)") +
theme_bw() +
theme(axis.text.x = element_text( hjust = 1),
legend.position = "none")
ggsave("R0vsTmax.png", plot = g2)
library(ggplot2)
#Tmax vs HI
g2 <- ggplot(df.cleaned, aes(x=Tmax, y = HI))+
geom_point() +
labs(title = "Scatter Plot of HI (mg HC/g TOC) vs Tmax", x = "Tmax(Celsius)", y = "HI (mg HC/g TOC)") +
theme_bw() +
theme(axis.text.x = element_text( hjust = 1),
legend.position = "none")
ggsave("R0vsTmax.png", plot = g2)
library(ggplot2)
#Tmax vs HI
g1 <- ggplot(df.cleaned, aes(x=Tmax, y = HI))+
geom_point() +
labs(title = "Scatter Plot of HI (mg HC/g TOC) vs Tmax", x = "Tmax(Celsius)", y = "HI (mg HC/g TOC)") +
theme_bw() +
theme(axis.text.x = element_text( hjust = 1),
legend.position = "none")
ggsave("R0vsTmax.png", plot = g1)
#R0 vs HI
g2 <- ggplot(df.cleaned, aes(x=R0, y = HI))+
geom_point() +
labs(title = "Scatter Plot of HI (mg HC/g TOC) vs R0", x = "R0(%)", y = "HI (mg HC/g TOC)") +
theme_bw() +
theme(axis.text.x = element_text( hjust = 1),
legend.position = "none")
ggsave("R0vsHI.png", plot = g2)
knitr::opts_chunk$set(echo = TRUE)
#import data set
data <- read.csv('../data/bodyPerformance.csv',skip=1, col.names = c("Age", "Gender","Height", "Weight", "Bodyfat", "Dialostic","Systolic", "Gripforce", "SitandBend", "Situps", "Broadjumps", "Class"))
head(data)
#dimensions
dim(data)
#structure of the dataset
str(data)
#missing values
library(mice)
miss.count <- function(x){
sort(colSums(is.na(x)), decreasing = TRUE )
}
miss.count(data)
md.pattern(data, rotate.names = TRUE, plot = TRUE)
#summary of the data set
summary(data)
library(dplyr)
data<- data %>%
select( -Gender, -Dialostic,-Systolic, -Class)
head(data)
#divide the data set in to two sets as physiology and exercise by combining the relevant variables.
physiology.set <- select(data, Age, Height, Weight, Bodyfat)
exercise.set <- select(data, Gripforce, SitandBend, Situps, Broadjumps)
#pshciology
head(physiology.set)
#exercise
head(exercise.set)
library(ggplot2)
library(tidyr)
library(gridExtra)
physiology_long <- pivot_longer(physiology.set, cols = everything(), names_to = "physiology", values_to = "value")
exercise_long <- pivot_longer(exercise.set, cols = everything(), names_to = "exercise", values_to = "value")
# boxplot for physiology set
physiology_plot <- ggplot(physiology_long, aes(x = physiology, y = value, fill = physiology)) +
geom_boxplot() +
labs(title = "Physiological variables", x = "Variables", y = "Value") +
scale_fill_manual(values = c("red", "green", "royalblue2","yellow")) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none")
# boxplot for exercise set
exercise_plot <- ggplot(exercise_long, aes(x = exercise, y = value, fill = exercise)) +
geom_boxplot() +
labs(title = "Exercise variables", x = "Variables", y = "Value") +
scale_fill_manual(values = c("red", "sienna", "palevioletred1", "royalblue2")) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none")
grid.arrange(physiology_plot, exercise_plot, ncol = 2)
setwd("E:/Lectures 4th/Sem 1/ST 405 - Multivariate Methods II/R/Mini project 2/src")
knitr::opts_chunk$set(echo = TRUE)
xx<-scale(physiology.set.new,scale=T,center=T)
yy<-scale(exercise.set.new,scale=T,center=T)
scorex<-xx%*%cca.scaled$xcoef[,1]
scorey<-yy%*%cca.scaled$ycoef[,1]
plot(scorex,scorey,type="n")
text(scorex,scorey,row.names(data.new),cex=.6)
xx<-scale(physiology.set.new,scale=T,center=T)
yy<-scale(exercise.set.new,scale=T,center=T)
scorex<-xx%*%cca.scaled$xcoef[,2]
scorey<-yy%*%cca.scaled$ycoef[,2]
plot(scorex,scorey,type="n")
text(scorex,scorey,row.names(data.new),cex=.6)
xx<-scale(physiology.set.new,scale=T,center=T)
yy<-scale(exercise.set.new,scale=T,center=T)
scorex<-xx%*%cca.scaled$xcoef[,3]
scorey<-yy%*%cca.scaled$ycoef[,3]
plot(scorex,scorey,type="n")
text(scorex,scorey,row.names(data.new),cex=.6)
xx<-scale(physiology.set.new,scale=T,center=T)
yy<-scale(exercise.set.new,scale=T,center=T)
scorex<-xx%*%cca.scaled$xcoef[,4]
scorey<-yy%*%cca.scaled$ycoef[,4]
plot(scorex,scorey,type="n")
text(scorex,scorey,row.names(data.new),cex=.6)
str(data.new)
data.new <- remove_outliers(data)
#import data set
data <- read.csv('../data/bodyPerformance.csv',skip=1, col.names = c("Age", "Gender","Height", "Weight", "Bodyfat", "Dialostic","Systolic", "Gripforce", "SitandBend", "Situps", "Broadjumps", "Class"))
head(data)
knitr::opts_chunk$set(echo = TRUE)
#import data set
data <- read.csv('../data/bodyPerformance.csv',skip=1, col.names = c("Age", "Gender","Height", "Weight", "Bodyfat", "Dialostic","Systolic", "Gripforce", "SitandBend", "Situps", "Broadjumps", "Class"))
head(data)
#dimensions
dim(data)
#structure of the dataset
str(data)
knitr::opts_chunk$set(echo = TRUE)
#import data set
data <- read.csv('../data/bodyPerformance.csv',skip=1, col.names = c("Age", "Gender","Height", "Weight", "Bodyfat", "Dialostic","Systolic", "Gripforce", "SitandBend", "Situps", "Broadjumps", "Class"))
head(data)
#dimensions
dim(data)
#structure of the dataset
str(data)
#missing values
library(mice)
miss.count <- function(x){
sort(colSums(is.na(x)), decreasing = TRUE )
}
miss.count(data)
md.pattern(data, rotate.names = TRUE, plot = TRUE)
#summary of the data set
summary(data)
library(dplyr)
data<- data %>%
select( -Gender, -Dialostic,-Systolic, -Class)
head(data)
#divide the data set in to two sets as physiology and exercise by combining the relevant variables.
physiology.set <- select(data, Age, Height, Weight, Bodyfat)
exercise.set <- select(data, Gripforce, SitandBend, Situps, Broadjumps)
#pshciology
head(physiology.set)
#exercise
head(exercise.set)
library(ggplot2)
library(tidyr)
library(gridExtra)
physiology_long <- pivot_longer(physiology.set, cols = everything(), names_to = "physiology", values_to = "value")
exercise_long <- pivot_longer(exercise.set, cols = everything(), names_to = "exercise", values_to = "value")
# boxplot for physiology set
physiology_plot <- ggplot(physiology_long, aes(x = physiology, y = value, fill = physiology)) +
geom_boxplot() +
labs(title = "Physiological variables", x = "Variables", y = "Value") +
scale_fill_manual(values = c("red", "green", "royalblue2","yellow")) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none")
# boxplot for exercise set
exercise_plot <- ggplot(exercise_long, aes(x = exercise, y = value, fill = exercise)) +
geom_boxplot() +
labs(title = "Exercise variables", x = "Variables", y = "Value") +
scale_fill_manual(values = c("red", "sienna", "palevioletred1", "royalblue2")) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none")
grid.arrange(physiology_plot, exercise_plot, ncol = 2)
library(CCA)
cormat=matcor(exercise.set,physiology.set)
cormat
img.matcor(cormat, type=2)
library(MVN)
# Madia test for multivariate normality
mvn(data = data,subset = NULL,mvnTest = "mardia")
# Henze-Zirkler's test for multivariate normality
mvn(data = data,subset = NULL,mvnTest = "hz")
result<-mvn(data = data,multivariateOutlierMethod = "adj",
showOutliers = TRUE, showNewData = TRUE)
#remove outliers using standarization
remove_outliers<- function(df, cols = names(df)) {
for (col in cols) {
col_mean <- mean(df[[col]])
col_std <- sd(df[[col]])
df[[col]] <- (df[[col]] - col_mean) / col_std
threshold <- 2
df <- df[abs(df[[col]]) <= threshold, ]
df[[col]] <- df[[col]] * col_std + col_mean
}
return(df)
}
data.new <- remove_outliers(data)
dim(data.new)
# mardia test for multivariate normality
mvn(data = data.new,subset = NULL,mvnTest = "mardia")
# Henze-Zirkler's test for multivariate normality
mvn(data = data.new,subset = NULL,mvnTest = "hz")
# Anderson-Darling test to check univariate normality
mvn_un <- mvn(data = data.new, univariateTest = "AD" , desc=T)
mvn_un$univariateNormality
data.new[data.new <= 0] <- 0.001
#Log transformation
data.log= log(data.new)
# Anderson-Darling test to check univariate normality
mvn_un.log <- mvn(data = data.log, univariateTest = "AD" , desc=T)
mvn_un.log$univariateNormality
# mardia test for multivariate normality
mvn(data = data.log,subset = NULL,mvnTest = "mardia")
# mardia test for multivariate normality
mvn(data = data.log,subset = NULL,mvnTest = "mardia")
str(data.new)
physiology.set.new <- select(data.new, Age, Height, Weight, Bodyfat)
physiology.set.new <- select(data.new, Age, Height, Weight, Bodyfat)
physiology.set.new <- select(data.new, Age, Height, Weight, Bodyfat)
physiology.set.new <- select(data.new, Age, Height, Weight, Bodyfat)
library(dplyr)
physiology.set.new <- select(data.new, Age, Height, Weight, Bodyfat)
library(dplyr)
physiology.set.new <- select(data.new, Age, Height, Weight, Bodyfat)
library(dplyr)
physiology.set.new <- select(data.new, Age, Height, Weight, Bodyfat)
library(dplyr)
physiology.set.new <- data.new %>%
select(Age, Height, Weight, Bodyfat)
library(dplyr)
physiology.set.new <- data.new[,1:4]
exercise.set.new <- data.new[,-(1:4)]
physiology.set.new
